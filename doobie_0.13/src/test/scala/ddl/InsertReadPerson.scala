package ddl

import doobie.free.connection.ConnectionIO
import doobierecipes.Transactor._
import doobierecipes.Util._
import org.scalatest.BeforeAndAfterAll
import org.scalatest.funsuite.AnyFunSuite

/**
  * insert and read the Person class with autogenerated key and retrive Result
  */
class InsertReadPerson extends AnyFunSuite with BeforeAndAfterAll {

  /**
    * CREATE TABLE person (
    * id   SERIAL,
    * name VARCHAR NOT NULL UNIQUE,
    * age  SMALLINT)
    */
  override def beforeAll(): Unit = dropCreateTablePerson().unsafeRunSync()

  import doobie.implicits._

  case class Person(id: Long, name: String, age: Option[Short])

  test("insert and read class Person") {

    def insertAndRead(name: String, age: Option[Short]): ConnectionIO[Person] =
      sql"insert into person (name, age) values ($name, $age)".update
        .withUniqueGeneratedKeys("id", "name", "age")

    val elvis = transactor.use(xa => insertAndRead("Elvis", None).transact(xa)).unsafeRunSync()

    assert(elvis == Person(1, "Elvis", None))
  }

}
